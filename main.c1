#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/inotify.h>
#include <fcntl.h>




int main() {
    // Create an inotify instance
    int fd = inotify_init();
    if (fd == -1) {
        perror("inotify_init");
        exit(EXIT_FAILURE);
    }

    // Add a watch for the file system events you want to track
    int wd = inotify_add_watch(fd, "/home/yangyi/company/testc", IN_MODIFY | IN_CREATE | IN_DELETE);
    if (wd == -1) {
        perror("inotify_add_watch");
        exit(EXIT_FAILURE);
    }

    // Buffer to read the events
    char buf[4096] __attribute__((aligned(__alignof__(struct inotify_event))));

    // Start monitoring for file system events
    while (1) {
        ssize_t len = read(fd, buf, sizeof(buf));
        if (len == -1) {
            perror("read");
            exit(EXIT_FAILURE);
        }

        // Process the events
        char *ptr = buf;
        while (ptr < buf + len) {
            struct inotify_event *event = (struct inotify_event *)ptr;

            // Check the event type
            if (event->mask & IN_MODIFY) {
                printf("File modified: %s\n", event->name);
                //如何获取变化的内容？

            // Get the file descriptor for the modified file
            int modified_fd = open(event->name, O_RDONLY);
            if (modified_fd == -1) {
                perror("open");
                exit(EXIT_FAILURE);
            }

            // Read the contents of the modified file
            char modified_buf[4096];
            ssize_t modified_len = read(modified_fd, modified_buf, sizeof(modified_buf));
            if (modified_len == -1) {
                perror("read");
                exit(EXIT_FAILURE);
            }

            // Print the modified content
            printf("Modified content: %.*s\n", (int)modified_len, modified_buf);

            // Close the file descriptor
            close(modified_fd);

            } else if (event->mask & IN_CREATE) {
                printf("File created: %s\n", event->name);
            } else if (event->mask & IN_DELETE) {
                printf("File deleted: %s\n", event->name);
            }

            ptr += sizeof(struct inotify_event) + event->len;
        }
    }

    // Remove the watch and close the inotify instance
    inotify_rm_watch(fd, wd);
    close(fd);

    return 0;
}